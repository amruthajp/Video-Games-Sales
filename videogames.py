# -*- coding: utf-8 -*-
"""Videogames.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SxXlfSNiUKcApE8ugJAWwRKd5Br0Ez4J

# **VIDEO GAMES SALES ANALYSIS**

**IMPORTING LIBRARIES**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error

"""**LOADING DATASET**"""

df=pd.read_csv('/content/Project_Videogames.csv')
df

"""**EXPLORATORY DATA ANALYSIS**"""

# Printing first five rows
df.head()

# Printing the last 5 rows
df.tail()

# Printing column names
df.columns

# Printing the datatype
df.dtypes

# Dimensions of the DataFrame
df.shape

#Summary Statistics
df.describe()

#Informations
df.info()

#Finding missing values
df.isna().sum()

#Count of Duplicated Rows
df.duplicated().sum()

#Count of '?' Values in Each Column
df.isin(['?']).sum()

#Value Counts for Categorical Columns
objects = ['Name', 'Platform', 'Genre', 'Publisher', 'Developer', 'Rating']

for obj in objects:
    print("Value counts for column:", obj)
    print(df[obj].value_counts())
    print("\n")

"""**DATA VISUALIZATION**

*What genre games have been made the most?*
"""

df['Genre'].value_counts()

plt.figure(figsize=(10, 5))
sns.countplot(x="Genre", data=df, order = df['Genre'].value_counts().index,palette='husl' )
plt.xticks(rotation=90)

"""*Which year had the most game release?*"""

plt.figure(figsize=(15, 10))
sns.countplot(x="Year_of_Release", data=df, order = df.groupby(by=['Year_of_Release'])['Name'].count().sort_values(ascending=False).index,palette='husl')
plt.xticks(rotation=90)

"""*Top 5 years games release by genre.*"""

plt.figure(figsize=(10, 7))
sns.countplot(x="Year_of_Release", data=df, hue='Genre', order=df.Year_of_Release.value_counts().iloc[:5].index,palette='husl')
plt.xticks(size=16, rotation=90)

"""*Which year had the highest sales worldwide?*"""

df_year = df.groupby(by=['Year_of_Release'])['Global_Sales'].sum()
df_year = df_year.reset_index()
plt.figure(figsize=(15, 10))
sns.barplot(x="Year_of_Release", y="Global_Sales", data=df_year,palette='husl')
plt.xticks(rotation=90)

"""*Which genre game have the highest sale price globally?*"""

df_genre = df.groupby(by=['Genre'])['Global_Sales'].sum()
df_genre = df_genre.reset_index()
df_genre = df_genre.sort_values(by=['Global_Sales'], ascending=False)
plt.figure(figsize=(10, 7))
sns.barplot(x="Genre", y="Global_Sales", data=df_genre,palette='husl')
plt.xticks(rotation=90)

"""*Top 10 platfrom having the highest sale price globally*"""

df_platform = df.groupby(by=['Platform'])['Global_Sales'].sum()
df_platform = df_platform.reset_index()
df_platform = df_platform.sort_values(by=['Global_Sales'], ascending=False).head(10)
plt.figure(figsize=(10, 7))
sns.barplot(x="Platform", y="Global_Sales", data=df_platform,palette='husl')
plt.xticks(rotation=90)

"""*Top 20 Publishers by Global Sales*"""

sale_pbl = df[['Publisher', 'Global_Sales']]
sale_pbl = sale_pbl.groupby('Publisher')['Global_Sales'].sum().sort_values(ascending=False).head(20)
sale_pbl = pd.DataFrame(sale_pbl).reset_index()
plt.figure(figsize=(15, 10))
sns.barplot(x='Publisher', y='Global_Sales', data=sale_pbl,palette='husl')
plt.xticks(rotation=90)

"""*Sales compearison by genre*"""

comp_genre = df[['Genre', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]

comp_map = comp_genre.groupby(by=['Genre']).sum()

comp_table = comp_map.reset_index()
comp_table = pd.melt(comp_table, id_vars=['Genre'], value_vars=['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales'], var_name='Sale_Area', value_name='Sale_Price')
comp_table.head()

plt.figure(figsize=(15, 10))
sns.barplot(x='Genre', y='Sale_Price', hue='Sale_Area', data=comp_table,palette='husl')

#Boxplot for detecting Outliers
for i in df.select_dtypes(include='number').columns:
  sns.boxplot(x=i,data=df)
  plt.show()

"""**DATA PREPROCESSING**"""

#Handling 'tbd' Values in the 'User_Score' Column
df['User_Score']=df['User_Score'].str.replace('tbd','0')
df['User_Score']=df['User_Score'].astype(float)
df.loc[df.User_Score==0,'User_Score']=np.NaN

#Dropping unwanted columns
df.drop(['Name','User_Score','User_Count'],inplace=True,axis=1)

#Treating Missing Values
float_lst=['Year_of_Release','Critic_Score','Critic_Count']
obj_lst=['Genre','Publisher','Developer','Rating']
for i in float_lst:
  df[i].fillna(df[i].median(),inplace=True)
for j in obj_lst:
  df[j].fillna(df[j].mode()[0],inplace=True)
df.isna().sum()

# Label encoding
end=LabelEncoder()
obj=['Platform','Genre','Publisher','Developer','Rating']
for k in obj:
  df[k]=end.fit_transform(df[k])
df.dtypes

#Outliers Treatment
def wisker(col):
  q1=col.quantile(0.25)
  q3=col.quantile(0.75)
  IQR=q3-q1
  LW=q1-1.5*IQR  #lower wisker
  UW=q3+1.5*IQR  #upper wisker
  return LW,UW

for i in ['Year_of_Release','NA_Sales','EU_Sales','JP_Sales','Global_Sales']:
  LW,UW=wisker(df[i])
  df[i]=np.where(df[i]<LW,LW,df[i])
  df[i]=np.where(df[i]>UW,UW,df[i])

for i in ['Year_of_Release','NA_Sales','EU_Sales','JP_Sales','Global_Sales']:
  sns.boxplot(x=i,data=df)
  plt.show()

df.corr()

sns.heatmap(df.corr(),cmap='Blues')

"""**SEPERATING X AND Y**"""

x=df.drop(['Global_Sales'],axis=1)
x

y=df['Global_Sales']
y

"""**SPLITTING DATA FOR TRAINING AND TESTING**"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=42)
x_train

x_test

y_train

y_test

"""**MODEL CREATION**"""

model=DecisionTreeRegressor()
model.fit(x_train,y_train)
y_pred=model.predict(x_test)
y_pred

"""**PERFORMANCE EVALUATION**"""

df1=pd.DataFrame({'Actual Data':y_test,'Predicted Data':y_pred,'Difference':y_test-y_pred})
df1

#Mean absolute error
print('Error is',mean_absolute_error(y_test,y_pred))

#Mean squared error
data=mean_squared_error(y_test,y_pred)
print('Mean Squared Error is',data)

#root mean squared error
print('Root mean squared error is',np.sqrt(data))

#R2 score
r2 = r2_score(y_test, y_pred)

print("R-squared Score:", r2)

error=mean_absolute_percentage_error(y_test,y_pred)
error

# Assuming y_test and y_pred are your test and predicted values, respectively plottingTrue vs Predicted Values Scatter Plot
plt.figure(figsize=(10, 8))
plt.scatter(y_test, y_pred, color='hotpink')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='k')
plt.xlabel('True Values')
plt.ylabel('Predicted Values')
plt.title('True vs Predicted Values')
plt.show()